<template>
  <el-dialog title="编辑{{description}}管理" :visible.sync="show" v-loading="loading">
    <el-form :model="form" label-width="120px" :rules="rules" ref="form">
      {% for column in columns -%}
      <el-form-item label="{{column.description}}" prop="{{column.field}}">
          {% if column.foreign_table -%}
          <el-select
          v-model="form.{{column.field}}"~
          style="width: 100%"
          :remote-method="$remote_select('{{column.foreign_table}}', '{{column.foreign_key}}', '{{column.foreign_label}}', this, '{{column.foreign_table}}List')"
          filterable
          remote
          reserve-keyword
        >
          <el-option
            v-for="item in {{column.foreign_table}}List"
            :key="item.{{column.foreign_key}}"
            :value="item.{{column.foreign_key}}"
            :label="item.{{column.foreign_label}}"
          ></el-option>
        </el-select>
          {% else -%}
        <el-input v-model="form.{{column.field}}" placeholder="请输入{{column.description}}" />
          {%- endif %}
      </el-form-item>
      {%- endfor %}
      <el-form-item>
        <el-button type="primary" @click="submit">提 交</el-button>
        <el-button @click="reset_form">重 置</el-button>
        <el-button @click="show=false">取 消</el-button>
      </el-form-item>
    </el-form>
  </el-dialog>
</template>

<script>
  import {
    update_{{model}}
  } from "./api_result";
    export default {
      name: "add",
      data(){
        return {
          loading:false,
          show:false,
          form:{},
          {% for column in columns -%}
          {% if column.foreign_table -%}
          {{column.foreign_table}}List: [],
          {% else -%}
          {% endif -%}
      {%- endfor %}
          rules:{
              {% for column in columns -%}
                {% if column|length > 0 -%}{{column.field}}:[{required:true, message:"请输入{{column.description}}", trigger:['blur']}],{% endif %}
              {% endfor %}
          }
        }
      },
      methods:{
      show_dialog(data) {
          this.show = true;
          this.form = Object.assign({}, data);
          this.source_data = Object.assign({}, data);
          this.form.modify_user_id = this.$store.state.user.user_id;
        },
        reset_form(){
          this.form={}
        },
        submit(){
          this.$refs["form"].validate((valid) => {
            if (valid) {
              this.loading = true;
              let $this = this;
              update_{{model}}(this.form).then(function (res) {
                $this.loading=false;
                if (res.code === 200){
                  $this.show=false;
                  $this.$emit("fresh");
                }else{
                  alert(res.message);
                }
              })
            } else {
              return false;
            }
          });
        }
      }
    }
</script>